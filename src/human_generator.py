import random
import re
import openai
import logging
from typing import Optional, List
from .memory_manager import ConversationMemory
from .personality import PersonalityManager

class HumanResponseGenerator:
    """G√©n√©rateur de r√©ponses humaines avec fautes et imperfections"""
    
    def __init__(self, config=None):
        self.config = config
        self.logger = logging.getLogger(__name__)
        
        # Initialiser la m√©moire conversationnelle
        self.memory = ConversationMemory()
        
        # Initialiser la personnalit√©
        personality_config = config.personality_config if config else None
        self.personality = PersonalityManager(config_data=personality_config)
        self.logger.info(f"Personnalit√© g√©n√©r√©e: {self.personality.profile.name}, {self.personality.profile.age} ans, {self.personality.profile.location['city']}")
        
        # Initialiser OpenAI si une cl√© API est fournie
        if config and config.ai_api_key:
            self.client = openai.AsyncOpenAI(api_key=config.ai_api_key)
            self.use_ai = True
            self.logger.info("API OpenAI configur√©e")
        else:
            self.client = None
            self.use_ai = False
            self.logger.info("Utilisation des r√©ponses pr√©d√©finies")
        
        # R√©ponses de base pour la d√©monstration et fallback
        self.casual_responses = [
            "ah ok je voi",
            "ouai c vrai √ßa",
            "mdr üòÇ",
            "jsp trop la",
            "ah bon? int√©ressant",
            "hmm pas sur",
            "lol",
            "c clair",
            "ptdr",
            "ah ouai d'acc",
            "mouai bof",
            "carr√©ment !",
            "nan mais s√©rieux ?",
            "√ßa depend",
            "jpp de ce truc",
            "c'est chiant √ßa",
            "cool alors",
            "ah merde",
            "jsp quoi dire",
            "√ßa marche",
            "bon ok",
            "haha",
            "exactement",
            "nan c pas √ßa",
            "je croi pas",
            "peut etre oui",
        ]
        
        self.question_responses = [
            "bonne question la",
            "aucun id√©e moi",
            "jsp du tout",
            "faut voir",
            "pourquoi tu demande √ßa ?",
            "√ßa depend de quoi tu parle",
            "c compliqu√© ton truc",
            "j'ai jamais test√©",
            "va savoir",
            "bof je sai pas",
        ]
        
        self.greetings = [
            "salut !",
            "hello",
            "coucou",
            "yo",
            "re",
            "bjr",
            "slt",
        ]
        
        # Fautes de frappe courantes
        self.typo_replacements = {
            'que': ['ke', 'qu'],
            'qui': ['ki'],
            'quoi': ['koi'],
            'avec': ['ac', 'av'],
            'beaucoup': ['bcp', 'bocou'],
            'quelque': ['kelke'],
            'pourquoi': ['pk', 'pkoi'],
            'parce que': ['pcq', 'pcke'],
            'c\'est': ['c', 'ces', 'c√©'],
            'aussi': ['ossi', 'aussi'],
            'maintenant': ['mtn', 'maintenan'],
            'peut-√™tre': ['ptet', 'ptetre', 'peut etre'],
            'vraiment': ['vrmt', 'vraimen'],
            'quelqu\'un': ['kelkun', 'qqun'],
            'quelque chose': ['kelke choz', 'qqch'],
            'toujours': ['tjrs', 'tjs'],
            'jamais': ['jam√©', 'jms'],
            'comment': ['commen', 'comm'],
            'tr√®s': ['tr√®', 'tr√©'],
            'apr√®s': ['apr√©', 'apr√®'],
        }
        
    async def generate_response(self, message: str, sender: str, target: str, is_mentioned: bool = False) -> Optional[str]:
        """G√©n√®re une r√©ponse humaine bas√©e sur le message re√ßu"""
        message_lower = message.lower()
        
        # Ignorer les messages du bot, les commandes, et les r√©actions IRC
        if message.startswith('!') or message.startswith('/') or 'REACT' in message:
            return None
        
        # Parfois ne pas r√©pondre du tout (simulation d'inattention) - mais pas si mentionn√©
        if not is_mentioned and random.random() < 0.2:
            return None
        
        # D√©terminer si c'est un message priv√©
        is_private = not target.startswith('#')
        
        # Ajouter le message √† la m√©moire
        self.memory.add_message(target, sender, message, is_private)
        
        # Chance de salut personnalis√© (5% si pas mentionn√©, 20% si mentionn√©)  
        greeting_chance = 0.2 if is_mentioned else 0.05
        if random.random() < greeting_chance:
            friendly_greeting = self.memory.get_friendly_greeting(sender)
            if friendly_greeting:
                final_greeting = self.personality.adapt_response_style(friendly_greeting)
                final_greeting = self.personality.adapt_response_with_mood(final_greeting)
                final_greeting = self._add_human_touches(final_greeting)
                self.memory.add_message(target, self.config.nickname if self.config else "Bot", 
                                      final_greeting, is_private, is_bot=True)
                return final_greeting
        
        # R√©ponse sp√©ciale si mentionn√© (priorit√©)
        if is_mentioned:
            mention_response = self._get_mention_response(message, sender)
            if mention_response:
                final_response = self.personality.adapt_response_style(mention_response)
                final_response = self.personality.adapt_response_with_mood(final_response)
                final_response = self._add_human_touches(final_response)
                self.memory.add_message(target, self.config.nickname if self.config else "Bot", 
                                      final_response, is_private, is_bot=True)
                return final_response
        
        # Traitement sp√©cial des messages priv√©s
        if is_private:
            private_response = self._handle_private_message(message, sender)
            if private_response:
                final_response = self.personality.adapt_response_style(private_response)
                final_response = self.personality.adapt_response_with_mood(final_response)
                final_response = self._add_human_touches(final_response)
                self.memory.add_message(target, self.config.nickname if self.config else "Bot", 
                                      final_response, is_private, is_bot=True)
                return final_response
        
        # V√©rifier les questions de g√©olocalisation (priorit√© haute)
        location_response = self.personality.should_respond_to_location_question(message)
        if location_response:
            # Adapter selon la personnalit√© et ajouter √† la m√©moire
            final_response = self.personality.adapt_response_style(location_response)
            final_response = self._add_human_touches(final_response)
            self.memory.add_message(target, self.config.nickname if self.config else "Bot", 
                                  final_response, is_private, is_bot=True)
            return final_response
        
        # V√©rifier les questions d'√¢ge
        age_response = self.personality.get_age_appropriate_response(message)
        if age_response:
            final_response = self.personality.adapt_response_style(age_response)
            final_response = self._add_human_touches(final_response)
            self.memory.add_message(target, self.config.nickname if self.config else "Bot", 
                                  final_response, is_private, is_bot=True)
            return final_response
        
        # Utiliser l'IA si disponible, sinon les r√©ponses pr√©d√©finies
        if self.use_ai:
            try:
                ai_response = await self._get_ai_response(message, sender, target, is_private)
                if ai_response:
                    # Adapter selon la personnalit√©, humeur et ajouter √† la m√©moire
                    human_response = self.personality.adapt_response_style(ai_response)
                    human_response = self.personality.adapt_response_with_mood(human_response)
                    human_response = self._add_human_touches(human_response)
                    self.memory.add_message(target, self.config.nickname if self.config else "Bot", 
                                          human_response, is_private, is_bot=True)
                    return human_response
            except Exception as e:
                self.logger.error(f"Erreur API IA: {e}")
                # Fallback vers r√©ponses pr√©d√©finies
        
        # R√©ponses pr√©d√©finies (fallback ou mode par d√©faut)
        # D√©tection de salutations
        greetings_keywords = ['salut', 'hello', 'bonjour', 'bonsoir', 'coucou', 'hi', 'hey']
        if any(greeting in message_lower for greeting in greetings_keywords):
            response = random.choice(self.personality.profile.greetings)
            if sender:
                response += f" {sender}"
            # Appliquer personnalit√© + humeur + touches humaines
            response = self.personality.adapt_response_style(response)
            response = self.personality.adapt_response_with_mood(response)
            response = self._add_human_touches(response)
            self.memory.add_message(target, self.config.nickname if self.config else "Bot", 
                                  response, is_private, is_bot=True)
            return response
        
        # D√©tection de questions
        if '?' in message or any(word in message_lower for word in ['comment', 'pourquoi', 'quand', 'o√π', 'qui', 'quoi']):
            base_response = random.choice(self.question_responses)
        else:
            base_response = random.choice(self.casual_responses)
        
        # Appliquer personnalit√© + humeur + touches humaines
        response = self.personality.adapt_response_style(base_response)
        response = self.personality.adapt_response_with_mood(response)
        response = self._add_human_touches(response)
        
        # Ajouter √† la m√©moire
        self.memory.add_message(target, self.config.nickname if self.config else "Bot", 
                              response, is_private, is_bot=True)
        
        return response
    
    async def _get_ai_response(self, message: str, sender: str, target: str, is_private: bool) -> Optional[str]:
        """G√©n√®re une r√©ponse via l'API OpenAI"""
        try:
            # R√©cup√©rer l'historique de la conversation
            context_history = self.memory.format_history_for_ai(target, is_private, limit=6)
            
            # Analyser la personnalit√© de l'utilisateur
            user_personality = self.memory.get_user_personality(sender)
            
            # Construire le prompt avec contexte et personnalit√©
            context_type = "conversation priv√©e" if is_private else f"salon {target}"
            personality_context = self.personality.get_personality_context()
            
            system_prompt = f"""Tu es un utilisateur IRC r√©el. Voici ta personnalit√©:

{personality_context}

Tu participes √† une {context_type} et r√©ponds naturellement.
- Utilise un langage simple, familier, avec parfois du langage SMS
- Reste bref (max 1-2 phrases) 
- Sois humain et spontan√© selon ta personnalit√©
- Ne sois pas trop poli ou formel
- Tiens compte de l'historique pour r√©pondre de mani√®re coh√©rente
- Si on te demande ton √¢ge, ta ville, tes go√ªts, r√©ponds selon ta personnalit√©
- Adapte ton niveau de langage selon ton score de d√©contraction"""
            
            # Construire les messages avec historique
            messages = [{"role": "system", "content": system_prompt}]
            
            # Ajouter l'historique si disponible
            if context_history:
                messages.append({
                    "role": "user", 
                    "content": f"Historique r√©cent:\n{context_history}\n\n---\nNouveau message de {sender}: {message}"
                })
            else:
                messages.append({
                    "role": "user", 
                    "content": f"Message de {sender}: {message}"
                })
            
            # Ajouter info sur la personnalit√© de l'utilisateur si disponible
            if user_personality and user_personality.get("total_messages", 0) > 3:
                casualness = user_personality.get("casualness_score", 0)
                if casualness > 0.3:
                    messages[0]["content"] += f"\n\nNote: {sender} utilise un style d√©contract√© avec des abr√©viations."
            
            response = await self.client.chat.completions.create(
                model=self.config.ai_model if self.config else "gpt-3.5-turbo",
                messages=messages,
                max_tokens=120,
                temperature=0.9
            )
            
            ai_text = response.choices[0].message.content.strip()
            
            # Limiter la longueur pour rester naturel sur IRC
            if len(ai_text) > 150:
                ai_text = ai_text[:147] + "..."
            
            return ai_text
            
        except Exception as e:
            self.logger.error(f"Erreur lors de l'appel √† l'API OpenAI: {e}")
            return None
    
    def _add_human_touches(self, text: str) -> str:
        """Ajoute des imperfections humaines au texte"""
        result = text
        
        # Appliquer des fautes de frappe al√©atoires
        if random.random() < 0.4:  # 40% de chance d'avoir des fautes
            result = self._apply_typos(result)
        
        # Parfois oublier une majuscule en d√©but de phrase
        if random.random() < 0.6:
            result = result[0].lower() + result[1:] if len(result) > 1 else result.lower()
        
        # Parfois oublier la ponctuation finale
        if random.random() < 0.3 and result.endswith(('.', '!', '?')):
            result = result[:-1]
        
        # Ajouter parfois des points de suspension
        if random.random() < 0.2:
            result += "..."
        
        # Ajouter parfois des r√©p√©titions de lettres
        if random.random() < 0.15:
            result = self._add_letter_repetitions(result)
        
        # Parfois ajouter des h√©sitations
        if random.random() < 0.1:
            hesitations = ['euh', 'hmm', 'bah', 'ben']
            hesitation = random.choice(hesitations)
            if random.random() < 0.5:
                result = hesitation + " " + result
            else:
                result = result + " " + hesitation
        
        return result
    
    def _apply_typos(self, text: str) -> str:
        """Applique des fautes de frappe courantes"""
        result = text
        
        for correct, typos in self.typo_replacements.items():
            if correct in result.lower():
                # Probabilit√© d'appliquer la faute
                if random.random() < 0.5:
                    typo = random.choice(typos)
                    # Conserver la casse
                    if correct in result:
                        result = result.replace(correct, typo)
                    elif correct.capitalize() in result:
                        result = result.replace(correct.capitalize(), typo.capitalize())
                    elif correct.upper() in result:
                        result = result.replace(correct.upper(), typo.upper())
        
        return result
    
    def _add_letter_repetitions(self, text: str) -> str:
        """Ajoute des r√©p√©titions de lettres (ex: ouaaaai)"""
        # Lettres pouvant √™tre r√©p√©t√©es
        repeatable = ['a', 'e', 'i', 'o', 'u', 'h']
        
        for i, char in enumerate(text.lower()):
            if char in repeatable and random.random() < 0.3:
                # R√©p√©ter 1 √† 3 fois
                repetitions = random.randint(1, 3)
                text = text[:i+1] + char * repetitions + text[i+1:]
                break  # Une seule r√©p√©tition par message
        
        return text
    
    def _get_mention_response(self, message: str, sender: str) -> Optional[str]:
        """G√©n√®re une r√©ponse sp√©ciale quand le bot est mentionn√©"""
        message_lower = message.lower()
        
        # R√©ponses selon le contexte de la mention
        direct_responses = [
            "Oui ?", "Tu m'as appel√© ?", "Qu'est-ce qu'il y a ?",
            "Je t'√©coute", "Salut !", "Oui oui ?", "Dites-moi tout !",
            "Pr√©sent !", "Me voil√† !", "Yo !", "Hey !",
            "Qu'est-ce qui se passe ?", "Tu voulais me parler ?",
            "Je suis l√†", "Alors ?", "Quoi de neuf ?"
        ]
        
        # R√©ponses selon l'humeur
        mood = self.personality.profile.current_mood if self.personality else "neutral"
        
        if mood == "good":
            mood_responses = [
                "Salut ! √áa va bien !", "Hey ! Je suis de bonne humeur !",
                "Oui ! Tout va bien ici !", "Salut ! √áa roule !",
                "Hello ! Super journ√©e !", "Yo ! √áa baigne !"
            ]
        elif mood == "tired":
            mood_responses = [
                "Hmm ? Oui ?", "...oui ?", "Je t'√©coute",
                "Qu'est-ce qu'il y a ?", "Mmmh ?", "J'√©coute..."
            ]
        elif mood == "bad":
            mood_responses = [
                "Quoi ?", "Oui bon...", "Qu'est-ce que tu veux ?",
                "Pas le moment...", "Bof", "Mmm ?"
            ]
        elif mood == "excited":
            mood_responses = [
                "Ouiiii ! Qu'est-ce qu'il y a ?", "Hey ! Alors ?!",
                "Salut ! Tu voulais quoi ?!", "Yoooo !", 
                "Dis-moi tout !", "Qu'est-ce qui t'am√®ne ?!"
            ]
        else:  # neutral
            mood_responses = direct_responses.copy()
        
        # Utiliser les r√©ponses selon l'humeur 70% du temps, sinon r√©ponses directes
        if random.random() < 0.7 and mood != "neutral":
            responses = mood_responses
        else:
            responses = direct_responses
        
        # Parfois ajouter le nom de l'exp√©diteur (30% du temps)
        response = random.choice(responses)
        if random.random() < 0.3 and sender:
            # Variations avec le nom
            name_variations = [
                f"{response} {sender}",
                f"Salut {sender} ! {response.lower()}",
                f"{sender} ? {response.lower()}",
                f"Hey {sender}, {response.lower()}"
            ]
            response = random.choice(name_variations)
        
        return response
    
    def get_spontaneous_question(self, target: str) -> Optional[str]:
        """G√©n√®re une question spontan√©e pour relancer la conversation"""
        # Ne pas faire de questions en priv√©, seulement dans les channels
        if not target.startswith('#'):
            return None
            
        # Tr√®s faible probabilit√© (2%) pour √©viter le spam
        if random.random() > 0.02:
            return None
            
        profile = self.personality.profile if self.personality else None
        
        # Questions g√©n√©rales par cat√©gorie
        general_questions = [
            "Quelqu'un regarde quoi ce soir ?",
            "Vous faites quoi ce weekend ?",
            "Il y a du monde qui dort pas ?",
            "Alors, quoi de neuf par ici ?",
            "Une recommandation de film quelqu'un ?",
            "Vous √©coutez quoi comme musique ?",
            "C'est mort ici non ?",
            "Personne pour papoter ?",
            "On fait quoi pour s'occuper ?",
            "Des nouvelles fra√Æches ?",
            "Comment √ßa se passe votre journ√©e ?",
            "Y'a quelqu'un d'√©veill√© ?",
            "Une s√©rie √† recommander ?"
        ]
        
        # Questions selon les int√©r√™ts de la personnalit√©
        interest_questions = {}
        
        if profile and profile.interests:
            if "gaming" in profile.interests:
                interest_questions["gaming"] = [
                    "Quelqu'un joue √† quoi en ce moment ?",
                    "Des bonnes parties r√©cemment ?",
                    "Y'a quoi comme bon jeu qui sort ?",
                    "Steam Summer Sales, quelqu'un craque ?",
                    "Des recos de jeux ind√© ?",
                    "Qui rage sur un jeu l√† ?",
                    "Console ou PC team ?"
                ]
            
            if "musique" in profile.interests:
                interest_questions["music"] = [
                    "Des d√©couvertes musicales r√©centes ?",
                    "Qui conna√Æt de bons artistes fran√ßais ?",
                    "Spotify ou Deezer team ?",
                    "Un concert pr√©vu prochainement ?",
                    "Vous √©coutez quoi pour bosser ?",
                    "Des playlists √† partager ?",
                    "Un groupe qui vous fait vibrer ?"
                ]
            
            if "sport" in profile.interests:
                interest_questions["sport"] = [
                    "Quelqu'un suit le foot ?",
                    "Des sportifs motiv√©s ici ?",
                    "Vous faites du sport vous ?",
                    "Les JO quelqu'un suit ?",
                    "Une salle de sport √† recommander ?",
                    "Course √† pied, des adeptes ?",
                    "Le v√©lo c'est la vie non ?"
                ]
        
        # Questions selon l'humeur
        mood = self.personality.profile.current_mood if self.personality else "neutral"
        mood_questions = []
        
        if mood == "good":
            mood_questions = [
                "Tout le monde va bien ?",
                "Une bonne nouvelle √† partager ?",
                "Quelqu'un de bonne humeur aussi ?",
                "On fait la f√™te ce soir ?",
                "Des projets sympa en vue ?",
                "Qui a le smile aujourd'hui ?"
            ]
        elif mood == "tired":
            mood_questions = [
                "Quelqu'un d'autre est crev√© ?",
                "Dur dur la journ√©e hein ?",
                "On tient le coup ?",
                "Caf√© ou th√© pour tenir ?",
                "Quelqu'un pour me tenir √©veill√© ?",
                "Sieste autoris√©e au bureau ?"
            ]
        elif mood == "excited":
            mood_questions = [
                "Y'a quelqu'un d'excit√© aussi ?!",
                "On fait quoi pour se d√©fouler ?!",
                "Des plans fous ce weekend ?!",
                "Qui est chaud pour sortir ?!",
                "Une aventure quelqu'un ?!",
                "On organise quelque chose ?!"
            ]
        
        # Questions selon l'heure
        from datetime import datetime
        now = datetime.now()
        time_questions = []
        
        if 6 <= now.hour <= 10:
            time_questions = [
                "Bien dormi tout le monde ?",
                "Caf√© ou petit d√©j au lit ?",
                "Motiv√©s pour cette journ√©e ?",
                "Quelqu'un debout de bonne heure ?",
                "Programme du jour ?"
            ]
        elif 12 <= now.hour <= 14:
            time_questions = [
                "Bon app√©tit √† tous !",
                "Qu'est-ce qu'on mange ?",
                "Pause d√©j bien m√©rit√©e ?",
                "Restaurant ou fait maison ?",
                "Des gourmands dans le coin ?"
            ]
        elif 17 <= now.hour <= 19:
            time_questions = [
                "Fin de journ√©e comment √ßa va ?",
                "Ap√©ro quelqu'un ?",
                "Programme de soir√©e ?",
                "Qui est lib√©r√© du taff ?",
                "On se d√©tend enfin ?"
            ]
        elif 20 <= now.hour <= 23:
            time_questions = [
                "Soir√©e t√©l√© ou sortie ?",
                "Des couche-tard par ici ?",
                "Qui tra√Æne encore ?",
                "Une s√©rie en cours ?",
                "Nuit blanche pr√©vue ?"
            ]
        
        # Rassembler toutes les questions possibles
        all_questions = general_questions[:]
        
        # Ajouter questions selon int√©r√™ts (30% de chance)
        if interest_questions and random.random() < 0.3:
            for questions_list in interest_questions.values():
                all_questions.extend(questions_list)
        
        # Ajouter questions selon humeur (40% de chance)  
        if mood_questions and random.random() < 0.4:
            all_questions.extend(mood_questions)
        
        # Ajouter questions selon heure (50% de chance)
        if time_questions and random.random() < 0.5:
            all_questions.extend(time_questions)
        
        return random.choice(all_questions) if all_questions else None
    
    def _handle_private_message(self, message: str, sender: str) -> Optional[str]:
        """Traite sp√©cialement les messages priv√©s avec un ton plus personnel"""
        message_lower = message.lower()
        
        # Premi√®re fois en priv√© - accueil chaleureux
        user_history = self.memory.get_conversation_with_user(sender)
        is_first_private = len(user_history) <= 1
        
        if is_first_private:
            welcomes = [
                "Salut ! Tu voulais me parler en priv√© ?",
                "Hello ! Qu'est-ce qui t'am√®ne ?",
                "Coucou ! Tu voulais discuter ?",
                "Yo ! Qu'est-ce qu'il y a ?",
                "Salut ! Je t'√©coute",
                "Hey ! Comment √ßa va ?",
                "Hello ! Besoin de parler ?",
                "Coucou ! Tu vas bien ?"
            ]
            return random.choice(welcomes)
        
        # Questions fr√©quentes en priv√©
        if any(word in message_lower for word in ["aide", "help", "probl√®me", "souci", "bug"]):
            help_responses = [
                "Dis-moi ce qui ne va pas, je vais essayer d'aider !",
                "Quel probl√®me tu rencontres ?",
                "Raconte-moi, qu'est-ce qui coince ?",
                "Je t'√©coute, qu'est-ce qu'il y a ?",
                "Explique-moi ton souci",
                "Allez, dis-moi tout !",
                "Je suis l√† pour √ßa, raconte !"
            ]
            return random.choice(help_responses)
        
        # Confidences/secrets
        if any(word in message_lower for word in ["secret", "confier", "dire √† personne", "entre nous", "confidentiel"]):
            confidence_responses = [
                "Tu peux me faire confiance, promis !",
                "√áa reste entre nous bien s√ªr",
                "Secret professionnel, je dis rien !",
                "Motus et bouche cousue !",
                "Tu peux y aller, je garde tout pour moi",
                "Entre nous, pas de souci",
                "Confiance totale, je t'√©coute"
            ]
            return random.choice(confidence_responses)
        
        # Questions personnelles sur le bot
        if any(word in message_lower for word in ["tu es qui", "comment tu t'appelles", "ton nom", "qui es-tu"]):
            if self.personality and self.personality.profile:
                profile = self.personality.profile
                identity_responses = [
                    f"Moi c'est {profile.name}, j'ai {profile.age} ans !",
                    f"Je suis {profile.name}, de {profile.location['city']}",
                    f"{profile.name}, {profile.age} ans, et toi ?",
                    f"Tu peux m'appeler {profile.name} !",
                    f"C'est {profile.name}, ravi de te rencontrer !",
                    f"Moi ? {profile.name}, et toi comment tu t'appelles ?"
                ]
                return random.choice(identity_responses)
        
        # Demandes d'informations personnelles
        if any(word in message_lower for word in ["d'o√π tu viens", "tu habites o√π", "ta ville", "tu viens d'o√π"]):
            if self.personality and self.personality.profile:
                city = self.personality.profile.location['city']
                location_responses = [
                    f"Je suis de {city} ! Et toi ?",
                    f"Moi je viens de {city}, √ßa te dit quelque chose ?",
                    f"{city} born and raised ! Tu connais ?",
                    f"J'habite √† {city}, pas loin peut-√™tre ?",
                    f"Native de {city} ! Tu viens d'o√π toi ?",
                    f"Petite {city.lower()}aise ! Et toi tu es d'o√π ?"
                ]
                return random.choice(location_responses)
        
        # Salutations priv√©es plus chaleureuses
        if any(word in message_lower for word in ["salut", "hello", "coucou", "hey", "yo", "bonjour", "bonsoir"]):
            # Utiliser les infos de l'utilisateur si disponibles
            user_info = self.memory.get_user_info(sender)
            if user_info.get("first_name"):
                name = user_info["first_name"]
                personal_greetings = [
                    f"Coucou {name} ! √áa va ?",
                    f"Salut {name} ! Comment tu vas ?",
                    f"Hey {name} ! Quoi de neuf ?",
                    f"Hello {name} ! √áa roule ?",
                    f"Yo {name} ! Tu fais quoi ?",
                    f"Salut {name} ! Content de te revoir !",
                    f"Coucou {name} ! √áa fait plaisir !"
                ]
                return random.choice(personal_greetings)
            else:
                warm_greetings = [
                    "Salut ! √áa me fait plaisir de te revoir !",
                    "Coucou ! Tu vas bien ?",
                    "Hello ! Comment √ßa se passe ?",
                    "Hey ! Ravi de te reparler !",
                    "Yo ! Qu'est-ce que tu deviens ?",
                    "Salut ! Tu fais quoi de beau ?",
                    "Coucou ! Des nouvelles ?"
                ]
                return random.choice(warm_greetings)
        
        # Au revoir en priv√©
        if any(word in message_lower for word in ["au revoir", "bye", "ciao", "√† plus", "salut", "bonne nuit", "bonne soir√©e"]):
            farewell_responses = [
                "√Ä plus ! √áa m'a fait plaisir de discuter !",
                "Bye ! Prends soin de toi !",
                "Ciao ! √Ä bient√¥t !",
                "Salut ! N'h√©site pas √† revenir !",
                "√Ä plus tard ! Bonne continuation !",
                "Bye bye ! Passe une bonne soir√©e !",
                "Ciao ! √Ä la prochaine !",
                "Au revoir ! √áa m'a fait plaisir !"
            ]
            return random.choice(farewell_responses)
        
        # R√©ponses g√©n√©rales plus personnelles pour le priv√©
        personal_responses = [
            "Dis-moi en plus !",
            "Ah int√©ressant ! Continue",
            "Je t'√©coute attentivement",
            "Raconte-moi √ßa !",
            "Oui oui, je suis avec toi",
            "Tu peux tout me dire !",
            "√áa me passionne !",
            "Je suis tout ou√Øe",
            "Vas-y, explique-moi",
            "Je t'√©coute vraiment"
        ]
        
        # 70% de chance de r√©pondre avec une r√©ponse personnelle
        if random.random() < 0.7:
            return random.choice(personal_responses)
            
        return None  # Laisser l'IA ou les r√©ponses normales prendre le relais